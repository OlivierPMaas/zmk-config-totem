//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

&mt {
    quick-tap-ms = <100>;
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <200>;
};

&lt { quick-tap-ms = <180>; };

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <8 9>;
        };

        shortcuts {
            bindings = <&sl 7>;
            key-positions = <12 13>;
        };

        i3 {
            bindings = <&mo_tog 0 0>;
            key-positions = <19 18>;
        };

        lctrl_del {
            bindings = <&kp LC(BACKSPACE)>;
            key-positions = <35 36>;
        };

        idea {
            bindings = <&sl 9>;
            key-positions = <12 11>;
        };
    };

    macros {
        gif: gif {
            label = "giphy";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LSHFT>,
                <&macro_tap>,
                <&kp N2>,
                <&macro_release>,
                <&kp LSHFT>,
                <&macro_tap>,
                <&kp G &kp I &kp F>;
        };

        shifted: macro_shifted_kp {
            #binding-cells = <1>;
            label = "MACRO_SHIFTED_KP";
            compatible = "zmk,behavior-macro-one-param";
            bindings =
                <&macro_press>,
                <&kp LSHFT &macro_param_1to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_release>,
                <&kp LSHFT>;
        };

        as: autoshift {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            label = "AUTOSHIFT_KP";
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>;
        };

        euro: euro {
            compatible = "zmk,behavior-macro";
            label = "EURO";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LALT>,
                <&macro_tap>,
                <&kp KP_NUMBER_0 &kp KP_NUMBER_1 &kp KP_NUMBER_2 &kp KP_NUMBER_8>,
                <&macro_release>,
                <&kp LALT>;
        };
    };

    behaviors {
        mo_tog: behavior_mo_tog {
            compatible = "zmk,behavior-hold-tap";
            label = "MO_TOG";
            bindings = <&mo>, <&tog>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            require-prior-idle-ms = <100>;
        };

        caps_hold: caps_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "CAPS_HOLD";
            bindings = <&kp>, <&caps_word>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        as_ht: autoshift_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTOSHIFT_HOLD_TAP";
            #binding-cells = <2>;
            tapping-term-ms = <170>;
            bindings = <&shifted>, <&kp>;

            flavor = "tap-preferred";
        };

        mod_as: mod_as {
            compatible = "zmk,behavior-hold-tap";
            label = "MOD_AS";
            bindings = <&kp>, <&as>;

            #binding-cells = <2>;
            tapping-term-ms = <500>;
            flavor = "tap-preferred";
            retro-tap;
        };

        repeat_mo: repeat_mo {
            compatible = "zmk,behavior-hold-tap";
            label = "REPEAT_MO";
            bindings = <&mo>, <&key_repeat>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        hmr_l: hmr_l {
            compatible = "zmk,behavior-hold-tap";
            label = "homerowmod left";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <5 6 7 8 30 19 9 31 18 29 17 28 16 27 15 26 35 36 37>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
        };

        hmr_r: hmr_r {
            compatible = "zmk,behavior-hold-tap";
            label = "homerowmod r";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <25 33 12 23 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 25 32 33 34>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        base_layer {
            label = "BASE";
            bindings = <
       &kp W          &kp L              &kp Y               &kp P           &kp B          &kp Z        &kp F            &kp O           &kp U               &kp SINGLE_QUOTE
       &hmr_l LGUI C  &hmr_l LEFT_ALT R  &hmr_l LCTRL S      &hmr_l LSHFT T  &kp G          &kp M        &hmr_r RSHFT N   &hmr_r RCTRL E  &hmr_r RIGHT_ALT I  &hmr_r RGUI A
&to 1  &kp Q          &kp J              &kp V               &kp D           &kp K          &kp X        &kp H            &kp COMMA       &kp PERIOD          &kp FSLH          &kp SEMICOLON
                                         &caps_hold LSHFT 0  &lt 3 TAB       &lt 2 SPACE    &lt 4 ENTER  &lt 5 BACKSPACE  &lt 7 DELETE
            >;
        };

        as_layer {
            label = "AUTO-SHIFT";
            bindings = <
       &as W  &as L  &as Y               &as P      &as B          &as Z           &as F            &as O         &as U    &as APOSTROPHE
       &as C  &as R  &as S               &as T      &as G          &as M           &as N            &as E         &as I    &as A
&to 0  &as Q  &as J  &as V               &as D      &as K          &as X           &as H            &as COMMA     &as DOT  &as FSLH        &as SEMICOLON
                     &caps_hold LSHFT 0  &lt 3 TAB  &lt 2 SPACE    &repeat_mo 4 0  &lt 5 BACKSPACE  &lt 7 DELETE
            >;
        };

        sym_type {
            bindings = <
       &none     &none     &none      &none      &kp TAB      &kp UNDERSCORE  &kp DOUBLE_QUOTES  &kp AT_SIGN      &euro          &kp PERCENT
       &sk LGUI  &sk LALT  &sk LCTRL  &sk LSHFT  &kp SPACE    &kp MINUS       &kp SQT            &kp EXCLAMATION  &kp QUESTION   &kp COLON
&none  &none     &none     &none      &none      &kp ENTER    &kp TILDE       &kp GRAVE          &kp HASH         &kp AMPERSAND  &kp ASTERISK  &none
                           &none      &none      &none        &kp SPACE       &kp BACKSPACE      &kp DELETE
            >;

            label = "SYMT";
        };

        navigation {
            bindings = <
       &none     &none     &none      &none      &none    &kp K_REDO  &kp HOME  &kp UP         &kp END      &kp PRINTSCREEN
       &sk LGUI  &sk LALT  &sk LCTRL  &sk LSHFT  &none    &kp K_UNDO  &kp LEFT  &kp DOWN       &kp RIGHT    &kp K_COPY
&none  &none     &none     &none      &none      &none    &none       &none     &kp PAGE_DOWN  &kp PAGE_UP  &kp K_CUT        &kp K_PASTE
                           &none      &none      &none    &kp RET     &kp BSPC  &kp DELETE
            >;

            label = "nav";
        };

        sym_code {
            bindings = <
       &mt CARET ASTERISK  &kp LEFT_BRACE              &as COLON           &kp RIGHT_BRACE                 &kp AMPERSAND    &none          &none      &none      &none     &none
       &kp EXCLAMATION     &kp LEFT_PARENTHESIS        &as EQUAL           &kp RIGHT_PARENTHESIS           &kp QUESTION     &kp BACKSPACE  &sk RSHFT  &sk RCTRL  &sk RALT  &sk RGUI
&none  &kp DOLLAR          &mt LESS_THAN LEFT_BRACKET  &as MINUS           &mt GREATER_THAN RIGHT_BRACKET  &kp PIPE         &kp DELETE     &none      &none      &none     &none     &none
                                                       &mt HASH BACKSLASH  &kp TAB                         &kp SPACE        &none          &none      &none
            >;

            label = "SYMC";
        };

        numblock {
            bindings = <
       &kp COLON  &kp N7  &kp N8  &kp N9      &mt KP_DIVIDE KP_MULTIPLY    &none          &none      &none      &none     &none
       &none      &kp N4  &kp N5  &kp N6      &mt KP_SUBTRACT KP_PLUS      &kp BACKSPACE  &sk RSHFT  &sk RCTRL  &sk RALT  &sk RGUI
&none  &euro      &kp N1  &kp N2  &kp N3      &none                        &kp DELETE     &none      &none      &none     &none     &none
                          &kp N0  &kp KP_DOT  &lt 6 SPACE                  &none          &none      &none
            >;

            label = "numb";
        };

        numfunctions {
            bindings = <
       &none  &kp F7  &kp F8  &kp F9  &kp F10    &bt BT_CLR  &bt BT_PRV  &bt BT_PRV  &none        &out OUT_TOG
       &none  &kp F4  &kp F5  &kp F6  &kp F11    &none       &sk RSHFT   &sk RCTRL   &sk RALT     &sk RGUI
&none  &none  &kp F1  &kp F2  &kp F3  &kp F12    &none       &none       &none       &bootloader  &sys_reset    &none
                      &none   &none   &none      &none       &none       &none
            >;

            label = "numf";
        };

        shortcuts {
            bindings = <
       &none      &kp LC(W)  &none      &kp LC(R)  &kp LC(T)        &none  &none      &none      &none     &none
       &kp LC(A)  &kp LC(S)  &kp LC(D)  &kp LC(F)  &kp LC(K)        &none  &sk RSHFT  &sk RCTRL  &sk RALT  &sk RGUI
&none  &kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)  &kp LC(Y)        &none  &none      &none      &none     &none     &none
                             &none      &none      &kp LA(LS(V))    &none  &none      &none
            >;

            label = "shortcuts";
        };

        idea {
            bindings = <
       &kp F2         &none          &kp F6         &kp LA(F7)     &none                &none  &none  &none  &none  &none
       &kp LS(LSHFT)  &kp LC(N)      &kp LS(LC(N))  &kp LS(LC(A))  &kp LS(LC(LA(T)))    &none  &none  &none  &none  &none
&to 0  &kp LA(LC(M))  &kp LA(LC(P))  &kp LA(LC(C))  &kp LA(LC(V))  &none                &none  &none  &none  &none  &none  &none
                                     &none          &none          &none                &none  &none  &none
            >;

            label = "idea";
        };

        i3 {
            bindings = <
       &kp LG(Q)        &kp LG(N7)  &kp LG(N8)  &kp LG(N9)  &kp LG(R)      &kp LG(ESCAPE)  &none          &none              &none      &none
       &kp LG(LC(A))    &kp LG(N4)  &kp LG(N5)  &kp LG(N6)  &kp LG(F)      &none           &kp LG(H)      &kp LG(J)          &kp LG(K)  &kp LG(L)
&none  &kp LG(LS(TAB))  &kp LG(N1)  &kp LG(N2)  &kp LG(N3)  &kp LG(TAB)    &none           &none          &none              &none      &none      &none
                                    &kp LALT    &kp LCTRL   &kp LSHFT      &kp LG(SPACE)   &kp LG(ENTER)  &kp LG(BACKSPACE)
            >;

            label = "i3";
        };
    };
};
