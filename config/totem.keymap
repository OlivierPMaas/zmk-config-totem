//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

&mt {
    quick-tap-ms = <100>;
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <200>;
};

&lt { quick-tap-ms = <180>; };

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };

        lctrl_del {
            bindings = <&kp LC(BACKSPACE)>;
            key-positions = <35 36>;
        };

        idea {
            bindings = <&sl 0>;
            key-positions = <12 11>;
        };

        copy {
            bindings = <&kp LC(C)>;
            key-positions = <2 1>;
        };

        paste {
            bindings = <&kp LC(V)>;
            key-positions = <2 3>;
        };

        grayscale {
            bindings = <&kp LG(LC(C))>;
            key-positions = <11 12 13>;
        };

        power {
            bindings = <&kp K_POWER>;
            key-positions = <16 17 18 13 12 11>;
        };
    };

    macros {
        gif: gif {
            label = "giphy";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LSHFT>,
                <&macro_tap>,
                <&kp N2>,
                <&macro_release>,
                <&kp LSHFT>,
                <&macro_tap>,
                <&kp G &kp I &kp F>;
        };

        shifted: macro_shifted_kp {
            #binding-cells = <1>;
            label = "MACRO_SHIFTED_KP";
            compatible = "zmk,behavior-macro-one-param";
            bindings =
                <&macro_press>,
                <&kp LSHFT &macro_param_1to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_release>,
                <&kp LSHFT>;
        };

        as: autoshift {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            label = "AUTOSHIFT_KP";
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>;
        };

        euro: euro {
            compatible = "zmk,behavior-macro";
            label = "EURO";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LALT>,
                <&macro_tap>,
                <&kp KP_NUMBER_0 &kp KP_NUMBER_1 &kp KP_NUMBER_2 &kp KP_NUMBER_8>,
                <&macro_release>,
                <&kp LALT>;
        };

        em_dash: em_dash {
            compatible = "zmk,behavior-macro";
            label = "EM_DASH";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LALT>,
                <&macro_tap>,
                <&kp KP_NUMBER_0 &kp KP_NUMBER_1 &kp KP_NUMBER_5 &kp KP_NUMBER_1>,
                <&macro_release>,
                <&kp LALT>;
        };
    };

    behaviors {
        mo_tog: behavior_mo_tog {
            compatible = "zmk,behavior-hold-tap";
            label = "MO_TOG";
            bindings = <&mo>, <&tog>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            require-prior-idle-ms = <100>;
        };

        caps_hold: caps_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "CAPS_HOLD";
            bindings = <&kp>, <&caps_word>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        as_ht: autoshift_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTOSHIFT_HOLD_TAP";
            #binding-cells = <2>;
            tapping-term-ms = <170>;
            bindings = <&shifted>, <&kp>;

            flavor = "tap-preferred";
        };

        mod_as: mod_as {
            compatible = "zmk,behavior-hold-tap";
            label = "MOD_AS";
            bindings = <&kp>, <&as>;

            #binding-cells = <2>;
            tapping-term-ms = <500>;
            flavor = "tap-preferred";
            retro-tap;
        };

        repeat_mo: repeat_mo {
            compatible = "zmk,behavior-hold-tap";
            label = "REPEAT_MO";
            bindings = <&mo>, <&key_repeat>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        hmr_l: hmr_l {
            compatible = "zmk,behavior-hold-tap";
            label = "homerowmod left";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <5 6 7 8 30 19 9 31 18 29 17 28 16 27 15 26 35 36 37>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <180>;
        };

        hmr_r: hmr_r {
            compatible = "zmk,behavior-hold-tap";
            label = "homerowmod r";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <25 33 12 23 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 25 32 33 34>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <180>;
        };

        slash: slash {
            compatible = "zmk,behavior-hold-tap";
            label = "SLASH";
            #binding-cells = <2>;
            tapping-term-ms = <280>;
            bindings = <&kp>, <&kp>;

            flavor = "tap-preferred";
        };

        emdash: emdash {
            compatible = "zmk,behavior-hold-tap";
            label = "EMDASH";
            #binding-cells = <2>;
            tapping-term-ms = <160>;
            bindings = <&em_dash>, <&kp>;

            flavor = "tap-preferred";
        };

        hmr_l_hold_pref: hmr_l_hold_pref {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR_L_HOLD_PREF";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <5 6 7 8 30 19 9 31 18 29 17 28 16 27 15 26 35 36 37>;
            flavor = "hold-preferred";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <180>;
        };

        timeless_hr_l: timeless_hr_l {
            compatible = "zmk,behavior-hold-tap";
            label = "TIMELESS_HR_L";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <5 6 7 8 30 19 9 31 18 29 17 28 16 27 15 26 35 36 37 33>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <100>;
        };

        timeless_hr_r: timeless_hr_r {
            compatible = "zmk,behavior-hold-tap";
            label = "TIMELESS_HR_R";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <14 3 12 2 11 0 10 11 13 14 20 21 22 23 24 25 32 33 34 1 4>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <100>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        base_layer {
            label = "BASE";
            bindings = <
       &hmr_l ESCAPE W                &kp L                      &kp Y                   &kp P                        &kp B          &kp Z        &kp F                         &kp O                           &kp U                       &kp SINGLE_QUOTE
       &timeless_hr_l LEFT_COMMAND C  &timeless_hr_l LEFT_ALT R  &timeless_hr_l LCTRL S  &timeless_hr_l LEFT_SHIFT T  &kp G          &kp M        &timeless_hr_r RIGHT_SHIFT N  &timeless_hr_r RIGHT_CONTROL E  &timeless_hr_r RIGHT_ALT I  &kp A
&to 2  &kp Q                          &kp J                      &kp V                   &kp D                        &kp K          &kp X        &kp H                         &kp COMMA                       &kp PERIOD                  &hmr_r BACKSLASH SLASH  &kp SEMICOLON
                                                                 &caps_hold LSHFT 0      &lt 4 TAB                    &lt 3 SPACE    &lt 5 ENTER  &lt 1 BACKSPACE               &lt 7 DELETE
            >;
        };

        shortcuts {
            bindings = <
       &kp LA(W)  &kp LS(LC(T))  &kp LC(W)  &kp LC(N)  &kp LC(U)        &none  &kp C_VOLUME_DOWN     &kp C_PLAY_PAUSE  &kp C_VOLUME_UP  &none
       &kp LC(Z)  &kp LC(R)      &kp LC(S)  &kp LC(T)  &kp LC(F)        &none  &sk RSHFT             &sk RCTRL         &sk RALT         &sk RGUI
&none  &kp LC(A)  &kp LC(X)      &kp LC(C)  &kp LC(V)  &kp LA(D)        &none  &kp C_BRIGHTNESS_DEC  &none             &kp C_BRI_INC    &none     &none
                                 &none      &none      &kp LA(LS(V))    &none  &none                 &none
            >;

            label = "shortcuts";
        };

        as_layer {
            label = "AUTO-SHIFT";
            bindings = <
       &as W  &as L  &as Y               &as P      &as B          &as Z           &as F            &as O         &as U    &as APOSTROPHE
       &as C  &as R  &as S               &as T      &as G          &as M           &as N            &as E         &as I    &as A
&to 0  &as Q  &as J  &as V               &as D      &as K          &as X           &as H            &as COMMA     &as DOT  &as FSLH        &as SEMICOLON
                     &caps_hold LSHFT 0  &lt 4 TAB  &lt 3 SPACE    &repeat_mo 5 0  &lt 1 BACKSPACE  &lt 7 DELETE
            >;
        };

        sym_type {
            bindings = <
       &none      &none  &kp LC(W)  &none      &kp TAB      &kp AT_SIGN  &kp LEFT_BRACKET  &kp ASTERISK     &kp RIGHT_BRACKET      &kp PERCENT
       &kp LC(Z)  &none  &kp LC(B)  &kp LC(I)  &kp SPACE    &kp HASH     &emdash 0 MINUS   &kp EXCLAMATION  &kp QUESTION           &kp COLON
&none  &none      &none  &none      &none      &kp ENTER    &kp GRAVE    &kp TILDE         &kp UNDERSCORE   &hmr_r PLUS AMPERSAND  &euro        &none
                         &none      &none      &none        &kp SPACE    &kp BACKSPACE     &kp DELETE
            >;

            label = "SYMT";
        };

        navigation {
            bindings = <
       &none     &none     &none      &none      &none    &kp K_REDO  &kp PG_UP  &kp UP      &kp PG_DN  &kp PRINTSCREEN
       &sk LGUI  &sk LALT  &sk LCTRL  &sk LSHFT  &none    &kp K_UNDO  &kp LEFT   &kp DOWN    &kp RIGHT  &kp K_COPY
&none  &none     &none     &none      &none      &none    &none       &kp HOME   &kp DOWN    &kp END    &kp K_CUT        &kp K_PASTE
                           &none      &none      &none    &kp RET     &kp BSPC   &kp DELETE
            >;

            label = "nav";
        };

        sym_code {
            bindings = <
       &kp CARET   &kp LEFT_BRACE              &as COLON           &kp RIGHT_BRACE                 &kp AMPERSAND    &none          &none           &kp UP_ARROW    &none      &none
       &kp TILDE   &kp LEFT_PARENTHESIS        &as EQUAL           &kp RIGHT_PARENTHESIS           &kp HASH         &kp BACKSPACE  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT  &sk RGUI
&none  &kp DOLLAR  &mt LESS_THAN LEFT_BRACKET  &as MINUS           &mt GREATER_THAN RIGHT_BRACKET  &kp PIPE         &kp DELETE     &none           &kp DOWN_ARROW  &none      &none     &none
                                               &mt HASH BACKSLASH  &kp TAB                         &kp SPACE        &none          &none           &none
            >;

            label = "SYMC";
        };

        numfunctions {
            bindings = <
       &none  &kp F7  &kp F8  &kp F9  &kp F10    &bt BT_CLR  &bt BT_PRV  &bt BT_PRV  &none        &out OUT_TOG
       &none  &kp F4  &kp F5  &kp F6  &kp F11    &none       &sk RSHFT   &sk RCTRL   &sk RALT     &sk RGUI
&none  &none  &kp F1  &kp F2  &kp F3  &kp F12    &none       &none       &none       &bootloader  &sys_reset    &none
                      &none   &none   &none      &none       &none       &none
            >;

            label = "numf";
        };

        numblock {
            bindings = <
       &kp COLON  &kp N7  &kp N8  &kp N9   &mt KP_DIVIDE KP_MULTIPLY    &none          &none      &none      &none     &none
       &none      &kp N4  &kp N5  &kp N6   &mt KP_SUBTRACT KP_PLUS      &kp BACKSPACE  &sk RSHFT  &sk RCTRL  &sk RALT  &sk RGUI
&none  &euro      &kp N1  &kp N2  &kp N3   &none                        &kp DELETE     &none      &none      &none     &none     &none
                          &kp N0  &kp DOT  &lt 6 SPACE                  &none          &none      &none
            >;

            label = "numb";
        };
    };
};
